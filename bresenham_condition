 procédure tracerSegment(entier x1, entier y1, entier x2, entier y2) est
  déclarer entier dx, dy;
  
	si (dx ← x2 - x1) ≠ 0 alors 
	{
		si dx > 0 alors 
		{
			si (dy ← y2 - y1) ≠ 0 alors 
			{
				si dy > 0 alors 
				{
					si dx ≥ dy alors
					{
						boucler sans fin 
						{ // déplacements horizontaux
						interrompre boucle si (x1 ← x1 + 1) = x2 ;
							si (e ← e - dy) < 0 alors 
							{
							fin si ; }
						fin boucle ; }
					} sinon
					{
						boucler sans fin 
						{  // déplacements verticaux
						interrompre boucle si (y1 ← y1 + 1) = y2 ;
							si (e ← e - dx) < 0 alors 
							{
							fin si ; }
						fin boucle ; }
					fin si ; }
				} sinon 
				{  // dy < 0 (et dx > 0)
					si dx ≥ -dy alors
					{
						boucler sans fin
						{ // déplacements horizontaux
						interrompre boucle si (x1 ← x1 + 1) = x2 ;
							si (e ← e + dy) < 0 alors
							{
							} fin si ;
						} fin boucle ;
					} sinon
					{ // vecteur oblique proche de la verticale, dans le 7e octant
						boucler sans fin
						{  // déplacements verticaux
						interrompre boucle si (y1 ← y1 - 1) = y2 ;
							si (e ← e + dx) > 0 alors
							{
							} fin si ;
						} fin boucle ;
					} fin si ;
				}fin si ;
      sinon { // dy = 0 (et dx > 0)
        répéter
        jusqu’à ce que (x1 ← x1 + 1) = x2 ;
      fin si ;
    sinon { // dx < 0
      si (dy ← y2 - y1) ≠ 0 alors {
        si dy > 0 alors {
          si -dx ≥ dy alors {
            boucler sans fin { // déplacements horizontaux
              interrompre boucle si (x1 ← x1 - 1) = x2 ;
              si (e ← e + dy) ≥ 0 alors {
              fin si ;
            fin boucle ;
          sinon {
            boucler sans fin { // déplacements verticaux
              interrompre boucle si (y1 ← y1 + 1) = y2 ;
              si (e ← e + dx) ≤ 0 alors {
              fin si ;
            fin boucle ;
          fin si ;
        sinon { // dy < 0 (et dx < 0)
          si dx ≤ dy alors {
            boucler sans fin {  // déplacements horizontaux
              interrompre boucle si (x1 ← x1 - 1) = x2 ;
              si (e ← e - dy) ≥ 0 alors {
              fin si ;
            fin boucle ;
          sinon { // vecteur oblique proche de la verticale, dans le 6e octant
            boucler sans fin  // déplacements verticaux
              interrompre boucle si (y1 ← y1 - 1) = y2 ;
              si (e ← e - dx) ≥ 0 alors {
              fin si ;
            fin boucle ;
          fin si ;
        fin si ;
      sinon { // dy = 0 (et dx < 0) 
        répéter
        jusqu’à ce que (x1 ← x1 - 1) = x2 ;
      fin si ;
    fin si ;
  sinon { // dx = 0
    si (dy ← y2 - y1) ≠ 0 alors {
      si dy > 0 alors {
        répéter
        jusqu’à ce que (y1 ← y1 + 1) = y2 ;
      sinon { // dy < 0 (et dx = 0)
        répéter
        jusqu’à ce que (y1 ← y1 - 1) = y2 ;
      fin si ;
    fin si ;
  fin si ;
fin procédure ;
